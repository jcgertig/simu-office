var esprima = require('esprima-fb');
var estraverse = require('estraverse-fb');
var estemplate = require('estemplate');
var escodegen = require('escodegen');

function isOneOf(o) {
  return o.type === 'CallExpression' && o.callee.property.name === 'oneOf';
}

var annotationsFor = function(node) {
  var target = node.value;
  var annotations = [];
  if (target.type === 'MemberExpression') {
    var typeProp = target.property || target.properties[target.properties.length - 1];
    if (typeProp.name === 'isRequired') {
      if (isOneOf(target.object)) {
        resolveEnum(target.object.arguments[0].elements);
      }

      annotations.push({
        key: 'isRequired',
        value: true,
      });
    }
    else {
      annotations.push({
        key: 'type',
        value: typeProp.name
      });
    }
  }
  else if (isOneOf(target)) {
    resolveEnum(target.arguments[0].elements);
  }
  /*
  else {
    // TODO: CallExpressions for shape
  }
  */

  function resolveEnum(arr) {
    annotations.push({
      key: 'type',
      value: 'enum <' + arr.map(function(c){return c.value}).join(' | ') + '>'
    })
  }
  var result = {
    type: 'ObjectExpression',
    properties: annotations.map(function(a) {
      return {
        type: 'Property',
        key: {
          type: 'Identifier',
          name: a.key,
        },
        value: {
          type: 'Literal',
          value: a.value
        }
      };
    })
  };

  return result;
}

module.exports = function transform(code) {
  var ast = esprima.parse(code);

  estraverse.replace(ast, {
    enter: function(node, parent) {
      /*
      if (node.type === 'ObjectExpression' &&
          parent.type === 'Property' &&
          parent.key.name === 'propTypes') {
         */
      if (node.type === 'Property' &&
          node.key.name === 'propTypes' &&
          typeof node.value.properties !== 'undefind'
         ) {
        if (node.value.properties == undefined) {
          console.log(node.value);
          return node;
        }
        node.value.properties = node.value.properties.map(function(node) {
          node.value = estemplate(
            'AnnotatePropTypes(' +
              '<%= propTypes %>, ' +
              '<%= annotation %>' +
            ')', {
              propTypes: node.value,
              annotation: annotationsFor(node)
            }
          );
          node.value = node.value.body[0].expression;

          return node;
        });

        return node;
      }
    },
    // leave: function(node, parent) {}
  });
  /*
  var result = escodegen.generate(ast);
  if (result !== code) console.log(result);
  */

  return escodegen.generate(ast);
};


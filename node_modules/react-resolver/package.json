{
  "name": "react-resolver",
  "version": "1.1.8",
  "description": "Isomorphic library to lazy-load data for React components",
  "main": "dist/index.js",
  "directories": {
    "test": "test"
  },
  "devDependencies": {
    "babel": "^5.1.13",
    "babel-eslint": "^2.0.2",
    "eslint": "^0.19.0",
    "eslint-plugin-react": "^2.2.0",
    "jsdom": "^3.1.2",
    "mocha": "^2.2.4",
    "react": "0.13.x"
  },
  "peerDependencies": {
    "react": "0.13.x"
  },
  "scripts": {
    "build": "babel --out-dir dist/ src/",
    "lint": "eslint src test",
    "prepublish": "npm run build",
    "test": "npm run build && mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericclemmons/react-resolver.git"
  },
  "keywords": [
    "react",
    "lazy",
    "load",
    "resolve"
  ],
  "author": {
    "name": "Eric Clemmons",
    "email": "eric@smarterspam.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/ericclemmons/react-resolver/issues"
  },
  "homepage": "https://github.com/ericclemmons/react-resolver",
  "dependencies": {},
  "readme": "# React Resolver ![https://img.shields.io/npm/v/react-resolver.svg](https://img.shields.io/npm/v/react-resolver.svg?style=flat-square)\n\n> Isomorphic library to lazy-load data for React components\n\n[![](https://img.shields.io/github/issues-raw/ericclemmons/react-resolver.svg?style=flat-square)](https://github.com/ericclemmons/react-resolver/issues)\n[![](https://img.shields.io/travis/ericclemmons/react-resolver/master.svg?style=flat-square)](https://travis-ci.org/ericclemmons/react-resolver)\n[![](https://img.shields.io/david/ericclemmons/react-resolver.svg?style=flat-square)](https://david-dm.org/ericclemmons/react-resolver#info=dependencies)\n\n\n## Features\n\n- **Promise-based** – Define & lazy-load component data dependencies and inject them as `props`.\n- **Isomorphic** – Express/Koa/Hapi-friendly server-side rendering & progressive, client-side rendering.\n- **Test friendly** – Containers promote separation between data-fetching & rendering.\n- [**Upcoming Fixes & Features**][upcoming].\n\n\n## Demo\n\n> [![Demo](demo.png)][demo]\n\n[View Demo][demo]\n\n\n- - -\n\n\n- [Features](#features)\n- [Demo](#demo)\n- [Dependencies](#dependencies)\n- [Installation](#installation)\n- [Usage](#usage)\n  + [Client](#client)\n  + [Server](#server)\n- [Changelog][changelog]\n- [Development](#development)\n- [Authors](#authors)\n- [License][license]\n\n- - -\n\n\n## Dependencies\n\n- React `v0.13.x`\n\n_For browsers that don't natively support Promises, use [ES6 Promises](https://github.com/jakearchibald/es6-promise)._\n\n\n## Installation\n\n```shell\nnpm install --save react-resolver\n```\n\n- - -\n\n## Usage\n\n_Example is based on [Stargazers.js](https://github.com/ericclemmons/react-resolver/blob/master/examples/stargazers/components/Stargazers.js) in the [demo][demo]._\n\nSuppose you want to display list of users, but that data is loaded\nasynchronously via an API.\n\nRather than having your component handle data-fetching _and_ rendering,\nyou can create a \"container\" that fetches the data and only renders when ready:\n\n```javascript\nimport React from \"react\";\nimport { Resolver } from \"react-resolver\";\n\nclass Users extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.users.map(user => (\n          <li>{user}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nUsers.defaultProps = { limit: 5 };\nUsers.propTypes = { users: React.PropTypes.array.isRequired };\n\n// Rather than `export default Users`, create a container:\nexport default Resolver.createContainer(Users, {\n  resolve: {\n    users: function(props, context) {\n      return fetch(`/api/users?limit=${props.limit}`);\n    }\n  }\n});\n\n```\n\nIf you use [React Router][router] (or anything else) that uses\n`context`, you can get access to these values via:\n\n```javascript\nResolver.createContainer(Users, {\n  contextTypes: {\n    router: React.PropTypes.func.isRequired\n  },\n\n  resolve: {\n    user: function(props, context) {\n      const { login } = context.router.getCurrentParams();\n\n      return fetch(`/api/users/${login}`);\n    }\n  }\n});\n\n```\n\n_For a working example of this, check out [User.js](https://github.com/ericclemmons/react-resolver/blob/master/examples/stargazers/handlers/User.js) in the [demo][demo]._\n\n\n### Client\n\nReplace `React.render` with `Resolver.render`, and you're all set!\n\n```javascript\nimport React from \"react\";\nimport { Resolver } from \"react-resolver\";\n\nResolver.render(<Users />, document.getElementById(\"app\"));\n```\n\n\n### Server\n\nBecause data has to be fetched asynchronously, `React.renderToString`\n(and `React.renderToStaticMarkup`) won't have the data in time.\n\nInstead, replace `React` with `Resolver` and you'll receive a promise\nthat resolves with the rendered output!\n\n```javascript\nimport React from \"react\";\nimport { Resolver } from \"react-resolver\";\n\nResolver.renderToString(<Users />).then((string) => {\n  reply(string);\n}).catch((err) {\n  // An error was thrown while rendering\n  console.error(err);\n});\n\n```\n\n- - -\n\n## Development\n\nIf you'd like to contribute to this project, all you need to do is clone\nthis project and run:\n\n```shell\n$ npm install\n$ npm test\n```\n\n\n## Authors\n\n- [Eric Clemmons](mailto:eric@smarterspam.com>) ([@ericclemmons][twitter])\n\n\n## [License][license]\n\n\n## Collaboration\n\nIf you have questions or issues, please [open an issue][issue]!\n\n\n[changelog]: https://github.com/ericclemmons/react-resolver/blob/master/CHANGELOG.md\n[demo]: https://cdn.rawgit.com/ericclemmons/react-resolver/master/examples/stargazers/public/index.html\n[issue]: https://github.com/ericclemmons/react-resolver/issues/new\n[license]: https://github.com/ericclemmons/react-resolver/blob/master/LICENSE\n[router]: https://github.com/rackt/react-router/\n[twitter]: https://twitter.com/ericclemmons/\n[upcoming]: https://github.com/ericclemmons/react-resolver/blob/master/CHANGELOG.md#upcoming\n",
  "readmeFilename": "README.md",
  "_id": "react-resolver@1.1.8",
  "_shasum": "c5f462b531d2ddd1670a8b15289fa4331009f959",
  "_resolved": "git+https://github.com/iamdustan/react-resolver#4278f46a668ec703bcbd311d795c0ee4a126960a",
  "_from": "react-resolver@git+https://github.com/iamdustan/react-resolver#expose-client-data-dist"
}
